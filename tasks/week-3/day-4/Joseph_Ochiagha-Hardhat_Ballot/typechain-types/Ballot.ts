/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chairperson"
      | "delegate"
      | "giveRightToVote"
      | "initialize"
      | "proposals"
      | "vote"
      | "voters"
      | "winnerName"
      | "winningProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chairperson",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveRightToVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "winnerName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningProposal",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "chairperson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "giveRightToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winnerName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningProposal",
    data: BytesLike
  ): Result;
}

export interface Ballot extends BaseContract {
  connect(runner?: ContractRunner | null): Ballot;
  waitForDeployment(): Promise<this>;

  interface: BallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chairperson: TypedContractMethod<[], [string], "view">;

  delegate: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  giveRightToVote: TypedContractMethod<
    [voter: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_chairperson: AddressLike, proposalNames: BytesLike[]],
    [void],
    "nonpayable"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  vote: TypedContractMethod<[proposal: BigNumberish], [void], "nonpayable">;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, string, bigint] & {
        weight: bigint;
        voted: boolean;
        delegate: string;
        vote: bigint;
      }
    ],
    "view"
  >;

  winnerName: TypedContractMethod<[], [string], "view">;

  winningProposal: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chairperson"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "giveRightToVote"
  ): TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_chairperson: AddressLike, proposalNames: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[proposal: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, string, bigint] & {
        weight: bigint;
        voted: boolean;
        delegate: string;
        vote: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "winnerName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winningProposal"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
